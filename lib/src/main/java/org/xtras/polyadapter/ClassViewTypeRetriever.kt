package org.xtras.polyadapter

import androidx.recyclerview.widget.RecyclerView
import kotlin.reflect.KClass

/**
 * Retrieves the ViewType using the hash code of the class
 * Remember to except [TItem] and its children from ProGuard
 * Useful for sealed-classes
 * @param TItem The supertype you want to support polymorphism by class
 */
class ClassViewTypeRetriever<TItem : Any> : ViewTypeRetriever<TItem> {

    /**
     * Returns the hash code using the hash code of the class of [value]
     */
    override fun getViewType(value: TItem) = value::class.hashCode()
}

/**
 * Register the [delegate] to the class of [TChildItem] and all its children if its a sealed class
 * Gets only children for sealed subclasses!
 * Remember to except [TItem] and its children from ProGuard!
 * @param TItem The supertype of the PolyAdapter
 * @param TChildItem A type that inherits [TItem] or [TItem] itself
 * @param TViewHolder The type of the ViewHolder to be use for this ViewType
 * @param delegate The delegate that will be attached with the ViewType generated by [TChildItem]
 * @return The self instance of the [PolyAdapterBuilder]
 */
inline fun <TItem, reified TChildItem, TViewHolder> PolyAdapterBuilder<TItem, ClassViewTypeRetriever<TItem>>.registerDelegate(
    delegate: ViewHolderDelegate<TChildItem, TViewHolder>
) where
    TItem : Any,
    TChildItem : TItem,
    TViewHolder : RecyclerView.ViewHolder = apply {

    val childItemClass = TChildItem::class

    if (childItemClass.isSealed) {
        childrenRecursively(childItemClass).forEach {
            registerDelegate(it.hashCode(), delegate)
        }

        return@apply
    }

    registerDelegate(childItemClass.hashCode(), delegate)
}

/**
 * Gets all the children recursively from [T], not including sealed and abstract classes
 * @return A sequence containing all the children
 */
fun <T : Any> childrenRecursively(clazz: KClass<T>): Sequence<KClass<out T>> = sequence {
    val children = clazz.sealedSubclasses

    children.forEach {
        yieldAll(childrenRecursively(it))

        if (!it.isSealed && !it.isAbstract) {
            yield(it)
        }
    }
}
