package org.xtras.polyadapter

import androidx.recyclerview.widget.RecyclerView

/**
 * Represents a function that gets a Enum inside an item
 */
typealias EnumSelector<TItem, TEnum> = TItem.() -> TEnum

/**
 * Retrieves the ViewType using the ordinal value of the enum
 * You should provide a way to fetch the enum inside the item
 * @param enumSelector Gets the enum inside the item, a lambda function where this is the item
 */
class EnumViewTypeRetriever<TItem, TEnum : Enum<TEnum>>(
    private val enumSelector: EnumSelector<TItem, TEnum>
) : ViewTypeRetriever<TItem> {

    /**
     * Returns the ordinal value of the enum, selected by the [enumSelector]
     */
    override fun getViewType(value: TItem) = enumSelector(value).ordinal
}

/**
 * Register a delegate for the [enum] value, using it to generate a ViewType
 * Extension method if you use [EnumViewTypeRetriever] as the [ViewTypeRetriever]
 * @param TItem The supertype of the PolyAdapter
 * @param TChildItem A type that inherits [TItem] or [TItem] itself
 * @param TViewHolder The type of the ViewHolder to be use for this ViewType
 * @param TEnum The Type of the Enum used as the ViewType identifier
 * @param enum The value of the Enum that this [delegate] should be attached with
 * @param delegate The delegate that will be attached with the ViewType generated by [enum]
 * @return The self instance of the [PolyAdapterBuilder]
 */
fun <TItem, TChildItem, TViewHolder, TEnum> PolyAdapterBuilder<TItem, EnumViewTypeRetriever<TItem, TEnum>>.registerDelegate(
    enum: TEnum,
    delegate: ViewHolderDelegate<TChildItem, TViewHolder>
) where
    TItem : Any,
    TChildItem : TItem,
    TViewHolder : RecyclerView.ViewHolder,
    TEnum : Enum<TEnum> = apply {

    registerDelegate(enum.ordinal, delegate)
}
